#!/usr/bin/env python3
"""
Script para iniciar el algoritmo gen√©tico completo con criterios de parada.
Este script evita el bucle infinito usando el algoritmo gen√©tico controlado.
"""

import os
import sys
import json
import time
from confluent_kafka import Producer
from dotenv import load_dotenv
import logging

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n b√°sica de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# Configuraci√≥n de Kafka
KAFKA_BROKER = os.environ.get("KAFKA_BROKER", "localhost:9092")

def create_producer():
    """Crea un productor de Kafka."""
    return Producer({
        'bootstrap.servers': KAFKA_BROKER,
        'linger.ms': 0,
        'batch.size': 1,
    })

def send_message(producer, topic, message):
    """Env√≠a un mensaje a un t√≥pico de Kafka."""
    try:
        producer.produce(topic, message.encode('utf-8'))
        producer.flush()
        logger.info(f"‚úÖ Mensaje enviado al t√≥pico '{topic}': {message}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error enviando mensaje: {e}")
        return False

def main():
    """Funci√≥n principal para iniciar el algoritmo gen√©tico controlado."""
    # Configuraci√≥n con criterios de parada
    config = {
        'num_channels': 1,           # Grayscale para MNIST
        'px_h': 28,                  # Altura MNIST
        'px_w': 28,                  # Ancho MNIST
        'num_classes': 10,           # Clases MNIST
        'batch_size': 32,            # Tama√±o de batch
        'num_poblation': 6,          # Tama√±o de poblaci√≥n
        'max_generations': 5,        # CRITERIO DE PARADA: M√°ximo 5 generaciones
        'fitness_threshold': 99,   # CRITERIO DE PARADA: Detener si se alcanza 99% de precisi√≥n
        'mutation_rate': 0.1         # Tasa de mutaci√≥n
    }
    
    logger.info("üöÄ Iniciando algoritmo gen√©tico controlado")
    logger.info(f"üìã Configuraci√≥n: {config}")
    logger.info("üõë Criterios de parada configurados:")
    logger.info(f"   - M√°ximo {config['max_generations']} generaciones")
    logger.info(f"   - Fitness objetivo: {config['fitness_threshold']}")
    
    try:
        # Crear productor
        producer = create_producer()
        
        # Usar el t√≥pico del algoritmo gen√©tico completo
        topic = "genetic-algorithm"
        message = json.dumps(config)
        
        if send_message(producer, topic, message):
            logger.info("üéâ Algoritmo gen√©tico iniciado correctamente")
            logger.info("üí° El algoritmo se detendr√° autom√°ticamente cuando:")
            logger.info("   ‚Ä¢ Se alcance el fitness objetivo")
            logger.info("   ‚Ä¢ Se complete el n√∫mero m√°ximo de generaciones")
            logger.info("   ‚Ä¢ Se detecte estancamiento en el fitness")
            logger.info("üìä Puedes monitorear el progreso en los logs del Broker")
        else:
            logger.error("‚ùå Error iniciando el algoritmo gen√©tico")
            return 1
            
    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
